{"version":3,"sources":["constants.ts","utils/request.ts","pages/user/listUser.tsx","pages/user/viewUser.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Endpoints","ResponseError","response","statusText","Error","parseJSON","status","json","checkStatus","error","request","url","options","a","fetch","fetchResponse","BASE_URL","Header","Layout","Content","Footer","SiteLayoutContent","styled","div","EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","inputNode","Item","name","style","margin","rules","required","message","ListCustomer","Form","useForm","form","useState","data","setData","setIsError","setIsLoading","editingKey","setEditingKey","isEditing","id","useEffect","LIST_USERS","result","fetchData","cancel","mergedColumns","key","editable","render","to","pathname","_","onConfirm","Link","disabled","onClick","setFieldsValue","age","birthDate","edit","map","col","onCell","className","theme","mode","defaultSelectedKeys","padding","component","components","body","cell","rowClassName","columns","dataSource","textAlign","ViewUser","useParams","undefined","console","log","LeftOutlined","width","actions","SettingOutlined","EditOutlined","EllipsisOutlined","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f815fd15.chunk.js","sourcesContent":["/*\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n */\n\nexport enum Endpoints {\n    LIST_USERS = '/users'\n}\n\nexport const BASE_URL = 'https://my-json-server.typicode.com/devjuliocesar/list_customer';\n","export class ResponseError extends Error {\n    public response: Response;\n\n    constructor(response: Response) {\n      super(response.statusText);\n      this.response = response;\n    }\n}\n/**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\nfunction parseJSON(response: Response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new ResponseError(response);\n  error.response = response;\n  throw error;\n}\n\n/**\n   * Requests a URL, returning a promise\n   *\n   * @param  {string} url       The URL we want to request\n   * @param  {object} [options] The options we want to pass to \"fetch\"\n   *\n   * @return {object}           The response data\n   */\nexport default async function request(\n  url: string,\n  options?: RequestInit,\n): Promise<any | { err: ResponseError }> {\n  const fetchResponse = await fetch(url, options);\n  const response = await checkStatus(fetchResponse);\n  return parseJSON(response);\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Layout, Menu, Breadcrumb, Table, Space, InputNumber, Input, Form, Typography, Popconfirm,\n} from 'antd';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport request from '../../utils/request';\nimport { BASE_URL, Endpoints } from '../../constants';\n\nconst { Header, Content, Footer } = Layout;\n\nconst SiteLayoutContent = styled.div`\n    min-height: 280px;\n    padding: 24px;\n    background: #fff;`;\n\ninterface IUser {\n  id: number\n  name: string\n  age: number\n  birthDate: Date\n}\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: 'number' | 'text';\n  record: IUser;\n  index: number;\n  children: React.ReactNode;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n  return (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst ListCustomer = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState<IUser[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editingKey, setEditingKey] = useState(0);\n\n  const isEditing = (record: IUser) => record.id === editingKey;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result: IUser[] = await request(BASE_URL + Endpoints.LIST_USERS);\n        setData(result);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  const cancel = () => {\n    setEditingKey(0);\n  };\n\n  const edit = (record: Partial<IUser> & { id: React.Key }) => {\n    form.setFieldsValue({\n      name: '', age: '', birthDate: '', ...record,\n    });\n    setEditingKey(record.id);\n  };\n\n  const columns = [\n    {\n      title: 'Nombre',\n      dataIndex: 'name',\n      key: 'name',\n      editable: true,\n      render: (name: string, record: IUser) => (\n        <Link to={{\n          pathname: `/list_customer/${record.id}`,\n        }}\n        >\n          {name}\n        </Link>\n      ),\n    },\n    {\n      title: 'Identificacion',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Edad',\n      dataIndex: 'age',\n      key: 'age',\n      editable: true,\n    },\n    {\n      title: 'Fecha de Nacimiento',\n      dataIndex: 'birthDate',\n      key: 'birthDate',\n      editable: true,\n    },\n    {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_: any, record: IUser) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <Popconfirm title=\"Estas seguro de cancelar\" onConfirm={cancel}>\n              Cancelar\n            </Popconfirm>\n          </span>\n        ) : (\n          <Typography.Link disabled={editingKey !== 0} onClick={() => edit(record)}>\n            Editar\n          </Typography.Link>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: IUser) => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n          <Menu.Item key=\"2\">Usuarios</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Usuarios</Breadcrumb.Item>\n        </Breadcrumb>\n        <SiteLayoutContent>\n          <Form form={form} component={false}>\n            <Table\n              components={{\n                body: {\n                  cell: EditableCell,\n                },\n              }}\n              rowClassName=\"editable-row\"\n              columns={mergedColumns}\n              dataSource={data}\n            />\n          </Form>\n        </SiteLayoutContent>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>\n        DeveloperJulioCesar®\n      </Footer>\n    </Layout>\n  );\n};\n\nexport default ListCustomer;\n","import {\n  Breadcrumb, Card, Layout, Menu,\n} from 'antd';\nimport { Content, Footer, Header } from 'antd/lib/layout/layout';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport {\n  EditOutlined, EllipsisOutlined, LeftOutlined, SettingOutlined,\n} from '@ant-design/icons';\nimport request from '../../utils/request';\nimport { BASE_URL, Endpoints } from '../../constants';\n\nconst SiteLayoutContent = styled.div`\n    min-height: 280px;\n    padding: 24px;\n    background: #fff;`;\n\ninterface IUser {\n  id: number\n  name: string\n  age: number\n  birthDate?: Date\n}\n\nconst ViewUser = () => {\n  const { id }: any = useParams();\n  const [data, setData] = useState<IUser>({\n    id: 0,\n    name: '',\n    birthDate: undefined,\n    age: 0,\n  });\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(id);\n\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result: any = await request(`${BASE_URL + Endpoints.LIST_USERS}/${id}`);\n        setData(result);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, [id]);\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n          <Menu.Item key=\"1\">\n            <Link to=\"/list_customer/list\"><LeftOutlined /></Link>\n          </Menu.Item>\n          <Menu.Item key=\"2\">Usuarios</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>\n            <Link to=\"/list_customer/list\">Usuarios</Link>\n          </Breadcrumb.Item>\n          <Breadcrumb.Item>{data.name}</Breadcrumb.Item>\n        </Breadcrumb>\n        <SiteLayoutContent>\n          <Card\n            title={data.name}\n            style={{ width: 300 }}\n            actions={[\n              <SettingOutlined key=\"setting\" />,\n              <EditOutlined key=\"edit\" />,\n              <EllipsisOutlined key=\"ellipsis\" />,\n            ]}\n          >\n            <p>\n              Identificación\n              {' '}\n              {data.id}\n            </p>\n            <p>\n              Edad\n              {' '}\n              {data.age}\n            </p>\n            <p>\n              Fecha de Nacimiento\n              {' '}\n              {data.birthDate}\n            </p>\n          </Card>\n        </SiteLayoutContent>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>\n        DeveloperJulioCesar®\n      </Footer>\n    </Layout>\n  );\n};\n\nexport default ViewUser;\n","import {\n  Switch, Route, BrowserRouter, Redirect,\n} from 'react-router-dom';\nimport React from 'react';\nimport './App.css';\nimport ListCustomer from './pages/user/listUser';\nimport ViewUser from './pages/user/viewUser';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/list_customer/list\" component={ListCustomer} />\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <Redirect to=\"/list_customer/list\" />\n          )}\n        />\n        <Route\n          exact\n          path=\"/list_customer\"\n          render={() => (\n            <Redirect to=\"/list_customer/list\" />\n          )}\n        />\n        <Route exact path=\"/list_customer/:id\" component={ViewUser} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}